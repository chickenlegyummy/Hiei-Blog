[
{

"id": 3,

"title": {

"en": "Backend Practice",

"zh_hk": "後端實踐"

},

"content": {

"en": "It's been 2 months for me in doing backend development. I would say it is pretty fun. Maybe I am amused by the fun of debugging, just like why it doesn't show anything or why there are no updates in the database. If I do not have an internship this summer, I won't be able to learn such things. So, let's get back to our topic today. \n\n This weekend, I attempted (without using AI) to do a backend service template for my future use, and I found some interesting theories or facts. First, do the configuration in tsconfig, \"module\": \"nodenext\", or you will see red lines.\n Second, be careful in handling messages. Even if you give a type to your message, it will still be \"Buffer\" type. \n\n <div class=\"code\">if (Buffer.isBuffer(message)) { // Remark: It basically send buffer to here OwOb\nmsg = message.toString(); // Convert Buffer to string\n} else {\nmsg = JSON.stringify(message);\n}</div> Therefore, I added this code to convert the buffer back to string type first.\n Third, I did some research on the background of WebSocket. So ws is not http, while http is only single channel, ws is dual channel\nhttp: end => end\n ws: end <=> end.\n It is designed to not do request and response as we did in Express. That increases the flexibility and lowers the difficulties. While Socket.io is just a wrapper of ws, and is simpler. Btw, they are all protocols actually, but simulated by JavaScript and make them usable in Node. \n\n And that's what I got today so far, I will still continue this one as my weekend toy or something, since it is really useful LMAO. See ya.\n\n Here is the github repo link <a style=\"color: var(--text-primary)\" href=\"https://github.com/chickenlegyummy/ts-socket-service\">Click Me!</a>",

"zh_hk": "我從事後端開發已經兩個月了。我覺得這挺有趣的。或許我被除錯的樂趣所吸引，就像為什麼什麼都沒顯示，或者為什麼資料庫沒有更新。如果今年夏天我沒有實習，我就不會學到這些東西。好吧，讓我們回到今天的話題。\n\n這個週末，我嘗試（沒有使用 AI）為將來使用製作一個後端服務模板，結果發現了一些有趣的理論或事實。首先，在 tsconfig 中進行配置，設置 \"module\": \"nodenext\"，否則你會看到紅線報錯。其次，要小心處理消息。即使你為消息指定了類型，它仍然會是 \"Buffer\" 類型。\n\n```javascript\nif (Buffer.isBuffer(message)) { // 備註：基本上這裏會收到 Buffer OwOb\n  msg = message.toString(); // 將 Buffer 轉換為字符串\n} else {\n  msg = JSON.stringify(message);\n}\n```\n因此，我加了這段代碼來先將 Buffer 轉換回字符串類型。\n\n第三，我研究了一下 WebSocket 的背景知識。WebSocket 並不是 HTTP，HTTP 是單向通道，而 WebSocket 是雙向通道：\n- HTTP：end => end\n- WebSocket：end <=> end\n\nWebSocket 的設計不是像 Express 那樣進行請求和響應，這增加了靈活性並降低了難度。而 Socket.io 只是 WebSocket 的一個封裝，更加簡單。順便說一句，它們實際上都是協議，但通過 JavaScript 模擬並在 Node 中實現可用。\n\n這就是我目前為止的收穫，我會繼續把這個當作我的週末玩具之類的，因為它真的很有用 LOL。下次見！ \n\n Here is the github repo link <a style=\"color: var(--text-primary)\" href=\"https://github.com/chickenlegyummy/ts-socket-service\">Click Me!</a>\n\n機翻 by Grok 3"

},

"date": "2025-08-09",

"tags": ["TypeScript", "JavaScript", "Web Development", "Server", "Backend"]

},

{

"id": 2,

"title": {

"en": "Multiplayer Game Development on the Web with JavaScript",

"zh_hk": "多人遊戲開發 - JavaScript 網頁"

},

"content": {

"en": "So I have been working on a multiplayer game using JavaScript, which is originally just a simple shooting game I made for fun. However, I decided to add multiplayer functionality to it, which turned out to be quite a challenge. I got ideas from working on a course project before in PolyU, COMP2432 - Operating System. The project do I/O between parent and children processes, which is quite similar to how multiplayer games work.\n\n I used Node.js, Express, and Socket.IO for real-time communication between clients. The architecture is quite simple, with a server listening for connections and operations by the players. Which handles the game state and broadcasts updates to all connected clients. <div class=\"code\"> // Broadcast new target to all clients (in server.js)\nio.emit('targetSpawned', target.toNetworkData()); </div> \n\n For example, when a player moves or shoots, it creates a message that is sent to the server, which then updates the game state and sends the updated state in a message to all clients. All the notified clients then rendering the game state, like player positions and actions, targets, and bullets.\n\n<img width=\"70%\" src=\"public/server.webp\"/>\n\n Although the structure is simple, the most challenging part is to ensure that all the I/O communication is done in real-time and synchronized across all clients. There is a crucial part that rendering objects in client-side, sometimes I got duplicated remote players or false positions. To fix them, I had to rewrite the rendering logic than the original SinglePlayer version of the game. Most importantly is to do research online about how others managed to do it.\n\n Here is the github repo link <a style=\"color: var(--text-primary)\" href=\"https://github.com/chickenlegyummy/oiia-threeJS\">Click Me!</a>",

"zh_hk": "我最近一直在用 JavaScript 開發一個多人遊戲，最初只是一個簡單的射擊遊戲，我是為了好玩而做的。但是，我決定為它添加多人功能，這成為了一個相當大的挑戰。我從之前在理工大學的課程項目中獲得了一些靈感，COMP2432 - Operating System。那個項目涉及父子進程之間的 I/O 通信，這與多人遊戲的工作方式非常相似。\n\n 我使用了 Node.js、Express 和 Socket.IO 來實現客戶端之間的實時通信。架構非常簡單，服務器監聽連接和玩家操作，處理遊戲狀態並將更新廣播給所有連接的客戶端。例如，當玩家移動或射擊時，它會創建一條消息發送到服務器，然後服務器更新遊戲狀態並將更新後的狀態以消息形式發送給所有客戶端。<div class=\"code\"> // Broadcast new target to all clients (in server.js)\nio.emit('targetSpawned', target.toNetworkData()); </div> \n\n 所有被通知的客戶端然後渲染遊戲狀態，例如玩家位置和行動、目標和子彈。\n\n<img width=\"70%\" src=\"public/server.webp\"/>\n\n 雖然結構很簡單，但最具挑戰性的部分是確保所有 I/O 通信都是實時完成並在所有客戶端之間同步。有一個關鍵部分是客戶端渲染對象，有時我會遇到重複的遠程玩家或錯誤的位置。為了解決這些問題，我不得不重寫渲染邏輯，而不是原來單人遊戲版本中的邏輯。最重要的是要在線上研究其他人是如何做到這一點的。\n\n 這裡是 GitHub 倉庫鏈接 <a style=\"color: var(--text-primary)\"href=\"https://github.com/chickenlegyummy/oiia-threeJS\">點擊我！</a> \n\n 中文版機翻 by Claude Sonnet 4 可能有點奇怪，請見諒。"

},

"date": "2025-07-15",

"tags": ["JavaScript", "Web Development", "Game Development", "Server"]

},

{

"id": 1,

"title": {

"en": "The First Take",

"zh_hk": "The First Take"

},

"content": {

"en": "This is the first ever post on this blog or even my first take on blogging. Actually, I made this for fun and to record my learning progress in web development and programming. The blogs here are not meant to be serious and to be 'public' in any way. They are just my personal notes and thoughts, so please don't take them too seriously. I will try to write in both English and Chinese, because I made the functionality to support both languages, why not use it? Well that's it for now. See'ya",

"zh_hk": "我想講我文筆唔係幾好，所以中文呢邊我會寫得口語啲，應該係話全程都係用白話。咁基於呢一點呢，我就真係個腦諗到寫咩就寫咩，exactly好似正常講野咁，所以中文呢邊我會解釋清楚啲同expand多少少啦。Well，入正題，呢個係我第一次寫blog，或者話第一次嘗試寫blog。其實呢個blog係我為咗好玩 (返工摸魚)，同埋順便寫下啲template/component比我到時用，例如話個tag searcher同light-dark theme呢啲。咁我都寫左個page出黎就順便記錄下我學web dev同埋programming嘅進度。咁呢個blog上面既野係0認真既，亦都唔係要突登公開既，咁你入得黎呢度一係我叫你入黎 or 真係一個冇野做既廢人 or 起底既仆街。BTW 我會試下用英文同中文寫呢個blog (我應該會寫左一邊先再AI translate呢一邊 unless我真係好得閒)，咁我都已經做咗個function，咁點解唔用呢？講完，88你條尾。"

},

"date": "2025-06-27",

"tags": ["Random"]

}
]
